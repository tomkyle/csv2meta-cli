#!/usr/bin/env bash




# ---------------------------------------
# Runtime Environment
# ---------------------------------------

set -o errexit  # -e
set -o nounset  # -u
# set -o xtrace # -x
set -o pipefail



# --------------------------------------
# Output and formatting stuff
# Color codes: https://gist.github.com/vratiu/9780109
# --------------------------------------

readonly C_BLUE='\e[1;34m'
readonly C_GRAY='\e[1;90m'
readonly NC='\e[0m' # No Color

function e_info {
  echo -e "${C_BLUE}${*}${NC}"
}

function e_section {
  echo -e "${C_GRAY}${*}${NC}"
}



# --------------------------------------
# Requirements
# --------------------------------------

function require  {
	command -v "${1}" >/dev/null 2>&1 || exit_err "${1} required but it's not installed";
}

# Requirements
require exiftool




# --------------------------------------
# Configuration
# --------------------------------------

# Turn on verbous output
declare -i overwrite_original=0
declare -i verbous_output=0


# --------------------------------------
# Settings
# --------------------------------------

CSV_DELIMITER=$'\t'

META_ID_FIELD="iptc:ObjectName"
META_TITLE_FIELD="iptc:Headline"
META_DESCRIPTION_FIELD="mwg:Description"
META_KEYWORDS_FIELD="mwg:Keywords"



# ======================================
#  Options parsing
# ======================================

# --------------------------------------
# _require_argument()
#
# Usage:
#   _require_argument <option> <argument>
#
# If <argument> is blank or another option, print an error message
#
# This function is stolen from William Melody's bash-boilerplate
# <https://github.com/alphabetum/bash-boilerplate>
# --------------------------------------

_require_argument() {
    # Set local variables from arguments.
    #
    # NOTE: 'local' is a non-POSIX bash feature and keeps the variable local to
    # the block of code, as defined by curly braces. It's easiest to just think
    # of them as local to a function.
    local _option="${1:-}"
    local _argument="${2:-}"

    if [[ -z "${_argument}" ]] || [[ "${_argument}" =~ ^- ]]
    then
        e_error "$(printf "Option requires a argument: %s\n" "${_option}")"
    fi
}


# ---------------------------------------
# Normalize options
#
# This section is stolen from William Melody's bash-boilerplate
# <https://github.com/alphabetum/bash-boilerplate>
# ---------------------------------------

# iterate over options, breaking -ab into -a -b and --foo=bar into --foo bar
# also turns -- into --endopts to avoid issues with things like '-o-', the '-'
# should not indicate the end of options, but be an invalid option (or the
# argument to the option, such as wget -qO-)
unset options
# while the number of arguments is greater than 0
while ((${#}))
do
  case ${1} in
    # if option is of type -ab
    -[!-]?*)
      # loop over each character starting with the second
      for ((i=1; i<${#1}; i++))
      do
        # extract 1 character from position 'i'
        c=${1:i:1}
        # add current char to options
        options+=("-${c}")

        # if option takes a required argument, and it's not the last char
        # make the rest of the string its argument
        if [[ ${OPTIONS_LIST} = *"${c}:"* && ${1:i+1} ]]
        then
          options+=("${1:i+1}")
          break
        fi
      done
      ;;
    # if option is of type --foo=bar, split on first '='
    --?*=*)
      options+=("${1%%=*}" "${1#*=}")
      ;;
    # end of options, stop breaking them up
    --)
      options+=(--endopts)
      shift
      options+=("${@}")
      break
      ;;
    # otherwise, nothing special
    *)
      options+=("${1}")
      ;;
  esac

  shift
done

# set new positional parameters to altered options. Set default to blank.
set -- "${options[@]:-}"
unset options




# ---------------------------------------
# Parse Options
# ---------------------------------------

# getopts and getopts have inconsistent behavior, so using a simple home-brewed
# while loop. This isn't perfectly compliant with POSIX, but it's close enough
# and this appears to be a widely used approach.
#
# More info:
#   http://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html
#   http://stackoverflow.com/a/14203146
#   http://stackoverflow.com/a/7948533
#
# This section is stolen from William Melody's bash-boilerplate
# <https://github.com/alphabetum/bash-boilerplate>
while [ ${#} -gt 0 ]
do
    __option="${1:-}"
    __maybe_param="${2:-}"

    case "${__option}" in
        # For a later release...

        -f|--force)
             overwrite_original=1
             ;;

        -v|--verbous|--verbose)
             verbous_output=1
             ;;

        --endopts)
            # Terminate option parsing.
            break
            ;;
        -*)
            # Assume option because of leading "-"
            e_error "$(printf "Unexpected option: %s\n" "${__option}")"
            ;;
        *)
            # "Anything else must be a CSV file parameter"
            # This is a WORKAROUND, as without this "*)" block any given image parameters
            # after the arguments seem to get lost (i.e., stuck in last $__option checked).
            csv_files_array+=("${__option}")
            ;;
    esac
    shift

done



# ======================================
#  Functions
# ======================================

function updateImage {

	inputFile="${1}"
	id="${2}"
	title="${3}"
	description="${4}"
	keywords="${5}"

	[ ! -f "${inputFile}" ] && { echo "File not found: ${inputFile}"; return 1; }

	echo;
	e_info "${inputFile}"
	e_section "New meta data"
	echo "ID             : ${id}"
	echo "title          : ${title}"
	echo "description    : ${description}"
	echo "keywords       : ${keywords}"


	# Determine current values
	IMAGE_ID=$(exiftool -s3 -"${META_ID_FIELD}" "${inputFile}")
	IMAGE_TITLE=$(exiftool -s3 -"${META_TITLE_FIELD}" "${inputFile}")
	IMAGE_DESCRIPTION=$(exiftool -s3 -"${META_DESCRIPTION_FIELD}" "${inputFile}")
	IMAGE_KEYWORDS=$(exiftool -s3 -"${META_KEYWORDS_FIELD}" "${inputFile}")


	# Split found keywords into array
	declare -a keywords_array=()
	OIFS=$IFS
	IFS=', '
	for keyword in $IMAGE_KEYWORDS; do keywords_array+=("${keyword}"); done
	IFS=','
	for keyword in $keywords; do keywords_array+=("${keyword}"); done
	IFS=$OIFS


	# Set to defaults if we got a blank result
	NEW_ID="${title:-${IMAGE_ID}}"
	NEW_TITLE="${title:-${IMAGE_TITLE}}"
	NEW_DESCRIPTION="${description:-${IMAGE_DESCRIPTION}}"
	NEW_KEYWORDS=($(echo "${keywords_array[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))


	# Build output filename
	OUTPUT_FILE="${NEW_ID}.${inputFile#*.}"
	OUTPUT_FILE="${inputFile}"

	# Build exiftool CLI parameters
	declare -a exiftool_params=()

	if  [ $overwrite_original -gt 0 ]; then
		exiftool_params+=(-overwrite_original)
		if  [ $verbous_output -gt 0 ]; then
			echo "Will overwrite original files"
		fi
	fi

	exiftool_params+=(
		-"${META_ID_FIELD}=${NEW_ID}"
		-"${META_TITLE_FIELD}=${NEW_TITLE}"
		-"${META_DESCRIPTION_FIELD}=${NEW_DESCRIPTION}"
		-"${META_KEYWORDS_FIELD}=${NEW_KEYWORDS[@]}"
		# -filename="${OUTPUT_FILE}"
	)


	# Update via exiftool
	echo;
	e_section "Running exiftool:"
	if  [ $overwrite_original -gt 0 ] && [ $verbous_output -gt 0 ]; then
		echo "(will overwrite original files)"
	fi

	exiftool "${exiftool_params[@]}" "${inputFile}"


	# Display results
	if  [ $verbous_output -gt 0 ]; then
		echo;
		e_section "Meta data now is:"
		exiftool -g1 -f \
			-"${META_ID_FIELD}" \
			-"${META_TITLE_FIELD}" \
			-"${META_DESCRIPTION_FIELD}" \
			-"${META_KEYWORDS_FIELD}" \
			"${OUTPUT_FILE}"
	fi
}


function main {

	CSV_FILE="${1}"

	[ ! -f "${CSV_FILE}" ] && { echo "${CSV_FILE} file not found"; exit 1; }

	OLDIFS=$IFS
	IFS=$CSV_DELIMITER
	while read -r inputFile id title description keywords;
	do
		updateImage \
			"${inputFile}" \
			"${id}" \
			"${title}" \
			"${description}" \
			"${keywords}" || continue
	done < <(tail -n +2 "${CSV_FILE}")
	IFS=$OLDIFS
}


# ======================================
# Business
# ======================================


for csvFile in "${csv_files_array[@]}"
do
	main "${csvFile}"
done;
